.\" Copyright (c) 2014 /n software inc. - All rights reserved.
.\" For more information, please visit www.nsoftware.com.
.\"
.TH SSHTunnel 3  2008-02-26 "IP*Works! SSH V9" "IP*Works! SSH V9 C++ Edition Manual Pages"

.SH NAME
SSHTunnel \- The SSHTunnel component can be used to tunnel data through an SSH server to a remote location.

.SH SYNOPSIS
.B #include <ipworksssh.h>
.br
.B #include <sshtunnel.h>
.sp
.BI "SSHTunnel *pInstance = new SSHTunnel();"
.br

.SH DESCRIPTION
NOTE: The following is only a brief description of the component.  Please refer
to the accompanying HTML documentation for complete details.
.BR
The SSHTunnel component can be used to tunnel data through an SSH server to a remote location.
The SSHTunnel component implements a daemon that accepts connections and tunnels the data from those connections over a Secure Shell (SSH) connection to a remote location.

.br

First, set
SSHHost
to the server you wish to use to tunnel the data.
SSHUser
,
SSHPassword
and  the
SSHCert
* properties   can be used to authenticate the tunneling connection.

.br

Second, set
SSHForwardHost
to the hostname or IP address of the destination machine, and
SSHForwardPort
to the port to which you wish to send data. Finally, set
Listening
to true. The component will listen for connections on the interface identified by
LocalHost
and
LocalPort
.

.br

When a client attempts to connect to the component, the component will fire a
ConnectionRequest
event that can be used to accept or reject the connection. If the connection is accepted, the component will attempt to logon to the
SSHHost
, and will tell the server to connect remotely to another machine. Once this process is complete, the tunnel will be established and data can be securely transmitted from end to end.

.br

Example: Connecting Between Networks

.br

A client which exists in Network A wishes to connect to resource that exists in Network B. Both networks are secured by a firewall, making it difficult to freely connect to resources within the other network. However, Network B contains an SSH server which supports tunneling. An SSHTunnel component set up with Network A can be used to access any resource in Network B.

.br

The
SSHHost
and
SSHPort
property must be set to the hostname and port exposed by Network B's firewall.
SSHForwardHost
and
SSHForwardPort
are then set to the value of the resource within Network B to which the client in Network A wishes to connect. Any client in Network A can then connect to the SSHTunnel instance's
LocalHost
and
LocalPort
.

.br

As clients within Network A connect to the SSHTunnel, the component will forward the connections, secured by SSH, through the network firewalls to the SSH server in Network B. The SSH server will then connect to the resource within Network B and forward all data received from the SSHTunnel instance to that resource. All data received from the resource will then be forwarded back to the original client in Network A.

.br


.SH PROPERTIES
Connected
.RS 
Triggers a connection or disconnection.
.RE
.sp
ConnectionBacklog
.RS 
The maximum number of pending connections maintained by the TCP/IP subsystem.
.RE
.sp
ClientCount
.RS 
The number of records in the Client arrays.
.RE
.sp
ClientAcceptData
.RS 
Setting this property to False, temporarily disables data reception (and the DataIn event) on the connection.
.RE
.sp
ClientBytesSent
.RS 
This property shows how many bytes were sent after the last assignment to DataToSend .
.RE
.sp
ClientConnected
.RS 
This property is used to disconnect individual connections and/or show their status.
.RE
.sp
ClientConnectionId
.RS 
This property contains an identifier generated by the component to identify each connection.
.RE
.sp
ClientDataToSend
.RS 
This property contains a string of data to be sent to the remote host.
.RE
.sp
ClientEOL
.RS 
The EOL property is used to define boundaries in the input stream using the value of the property.
.RE
.sp
ClientLocalAddress
.RS 
This property shows the IP address of the interface through which the connection is passing.
.RE
.sp
ClientRemoteHost
.RS 
This property shows the IP address of the remote host through which the connection is coming.
.RE
.sp
ClientRemotePort
.RS 
This property shows the TCP port on the remote host through which the connection is coming.
.RE
.sp
ClientSingleLineMode
.RS 
This property shows the special mode for line-oriented protocols.
.RE
.sp
ClientTimeout
.RS 
This property contains a timeout for the component.
.RE
.sp
DefaultEOL
.RS 
A default EOL value to be used by incoming connections.
.RE
.sp
DefaultSingleLineMode
.RS 
Tells the component whether or not to treat new connections as line-oriented.
.RE
.sp
DefaultTimeout
.RS 
An initial timeout value to be used by incoming connections.
.RE
.sp
FirewallAutoDetect
.RS 
This property tells the component whether or not to automatically detect and use firewall system settings, if available.
.RE
.sp
FirewallType
.RS 
This property determines the type of firewall to connect through.
.RE
.sp
FirewallHost
.RS 
This property contains the name or IP address of firewall (optional).
.RE
.sp
FirewallPassword
.RS 
This property contains a password if authentication is to be used when connecting through the firewall.
.RE
.sp
FirewallPort
.RS 
This property contains the TCP port for the firewall Host .
.RE
.sp
FirewallUser
.RS 
This property contains a user name if authentication is to be used connecting through a firewall.
.RE
.sp
KeepAlive
.RS 
When True, KEEPALIVE packets are enabled (for long connections).
.RE
.sp
Linger
.RS 
When set to True, connections are terminated gracefully.
.RE
.sp
Listening
.RS 
If True, the component accepts incoming connections on LocalPort.
.RE
.sp
LocalHost
.RS 
The name of the local host or user-assigned IP interface through which connections are initiated or accepted.
.RE
.sp
LocalPort
.RS 
The TCP port in the local host where IPPort binds.
.RE
.sp
SSHAcceptServerHostKeyEncoded
.RS 
The certificate (PEM/base64 encoded).
.RE
.sp
SSHAuthMode
.RS 
The authentication method to be used the component when performing an SSHLogon .
.RE
.sp
SSHCertEncoded
.RS 
The certificate (PEM/base64 encoded).
.RE
.sp
SSHCertStore
.RS 
The name of the certificate store for the client certificate.
.RE
.sp
SSHCertStorePassword
.RS 
If the certificate store is of a type that requires  a password, this property is used to specify that  password in order to open the certificate store.
.RE
.sp
SSHCertStoreType
.RS 
The type of certificate store for this certificate.
.RE
.sp
SSHCertSubject
.RS 
The subject of the certificate used for client authentication.
.RE
.sp
SSHCompressionAlgorithms
.RS 
A comma-separated list containing all allowable compression algorithms.
.RE
.sp
SSHEncryptionAlgorithms
.RS 
A comma-separated list containing all allowable compression algorithms.
.RE
.sp
SSHForwardHost
.RS 
The address of the remote host.  Domain names are resolved to IP addresses.
.RE
.sp
SSHForwardPort
.RS 
The TCP port in the remote host.
.RE
.sp
SSHHost
.RS 
The address of the SSH host.
.RE
.sp
SSHPassword
.RS 
The password for SSH password-based authentication.
.RE
.sp
SSHPort
.RS 
The port on the SSH server where the SSH service is running; by default, 22.
.RE
.sp
SSHUser
.RS 
The username for SSH authentication.
.RE
.sp


.SH METHODS
Config
.RS 
Sets or retrieves a configuration setting.
.RE
.sp
DecodePacket
.RS 
Decodes a hex-encoded SSH packet.
.RE
.sp
Disconnect
.RS 
Disconnect the specified client.
.RE
.sp
DoEvents
.RS 
Processes events from the internal message queue.
.RE
.sp
EncodePacket
.RS 
Hex encodes an SSH packet.
.RE
.sp
GetSSHParam
.RS 
Used to read a field from an SSH packet's payload.
.RE
.sp
GetSSHParamBytes
.RS 
Used to read a field from an SSH packet's payload.
.RE
.sp
SetSSHParam
.RS 
Used to write a field to the end of a payload.
.RE
.sp
Shutdown
.RS 
Shuts down the server.
.RE
.sp


.SH EVENTS
Connected
.RS 
Fired immediately after a connection completes (or fails).
.RE
.sp
ConnectionRequest
.RS 
Fired when a request for connection comes from a remote host.
.RE
.sp
DataIn
.RS 
Fired when data (complete lines) comes in.
.RE
.sp
Disconnected
.RS 
Fired when a connection is closed.
.RE
.sp
Error
.RS 
Information about errors during data delivery.
.RE
.sp
SSHCustomAuth
.RS 
Fired when the component is doing custom authentication.
.RE
.sp
SSHKeyboardInteractive
.RS 
Fired when the component receives a request for user input from the server.
.RE
.sp
SSHServerAuthentication
.RS 
Fired after the server presents its public key to the client.
.RE
.sp
SSHStatus
.RS 
Shows the progress of the secure connection.
.RE
.sp


.SH "SEE ALSO"
.BR CertMgr (3),
.BR PSClient (3),
.BR SCP (3),
.BR SExec (3),
.BR SFTP (3),
.BR SSHClient (3),
.BR SSHDaemon (3),
.BR SShell (3),
.BR SSHReverseTunnel (3),
.BR SSHTunnel (3),


