.\" Copyright (c) 2014 /n software inc. - All rights reserved.
.\" For more information, please visit www.nsoftware.com.
.\"
.TH SSHDaemon 3  2008-02-26 "IP*Works! SSH V9" "IP*Works! SSH V9 C++ Edition Manual Pages"

.SH NAME
SSHDaemon \- The SSHDaemon component is used to create Secure Shell (SSH) servers. The component handles multiple simultaneous connections on the same TCP/IP port (service port). It is designed to balance the load between connections for a fast, powerful server.

.SH SYNOPSIS
.B #include <ipworksssh.h>
.br
.B #include <sshdaemon.h>
.sp
.BI "SSHDaemon *pInstance = new SSHDaemon();"
.br

.SH DESCRIPTION
NOTE: The following is only a brief description of the component.  Please refer
to the accompanying HTML documentation for complete details.
.BR
The SSHDaemon component is used to create Secure Shell (SSH) servers. The component handles multiple simultaneous connections on the same TCP/IP port (service port). It is designed to balance the load between connections for a fast, powerful server.
The SSHDaemon component is the SSH-enabled equivalent of the IP*Works! IPDaemon component, extended by a set of new properties and events that deal with SSH security.  The
SSHCompressionAlgorithms
and
SSHEncryptionAlgorithms
properties determine which protocols are enabled for the SSH handshake. The
SSHCert
* properties are   used to select a certificate for the server (please note that a valid certificate MUST be selected before the server can function). The
SSHUserAuthRequest
event will allow you to use authenticate clients using digital certificates or passwords. Finally, the
SSHStatus
event provides information about the SSH handshake and underlying protocol notifications.

.br

By default, each instance of SSHDaemon can handle up to 1000 simultaneous incoming connections (this number may be increased up to 100,000, or decreased to a lower value by using the
MaxConnections
configuration setting).

.br

SSH connections are identified by a
ConnectionId
. Events relating to these connections as a whole will use the
ConnectionId
to identify the specific connection. Connections may also contained one or more multiplexed channels, which are identified by a
ChannelId
. Channel-level events will specify the
ChannelId
to which they relate.

.br

SSHDaemon can start to listen on a port by setting the
Listening
property to True. When a remote host asks for a connection, the
ConnectionRequest
event is fired. At that point, the connection can either be accepted or rejected. If the connection is accepted, a
ConnectionId
is assigned, and communication can start. From this point on, the operation is very similar to SSHClient. Data can be sent to an individual
SSHChannel
using
SendChannelData
. The address and port of the incoming connection can be found by querying the
RemoteHost
and
RemotePort
properties.

.br



.br


.SH PROPERTIES
SSHChannelCount
.RS 
The number of records in the  arrays.
.RE
.sp
BytesSent
.RS 
The number of bytes actually sent after a sending channel data.
.RE
.sp
ChannelId
.RS 
An id generated by the component to identify the current SSH channel.
.RE
.sp
DataToSend
.RS 
A string of data to be sent to the remote host.
.RE
.sp
ConnectionBacklog
.RS 
The maximum number of pending connections maintained by the TCP/IP subsystem.
.RE
.sp
SSHConnectionCount
.RS 
The number of records in the SSHConnection arrays.
.RE
.sp
SSHConnectionConnected
.RS 
Used to disconnect individual connections and/or show their status.
.RE
.sp
SSHConnectionLocalAddress
.RS 
This property shows the IP address of the interface through which the connection is passing.
.RE
.sp
SSHConnectionRemoteHost
.RS 
The RemoteHost shows the IP address of the remote host through which the connection is coming.
.RE
.sp
SSHConnectionRemotePort
.RS 
The RemotePort shows the TCP port on the remote host through which the connection is coming.
.RE
.sp
SSHConnectionTimeout
.RS 
A timeout for the component.
.RE
.sp
DefaultAuthMethods
.RS 
Specifies the supported authentication methods.
.RE
.sp
DefaultTimeout
.RS 
An initial timeout value to be used by incoming connections.
.RE
.sp
KeyboardInteractiveMessage
.RS 
The instructions to send to the client during keyboard-interactive authentication.
.RE
.sp
KeyboardInteractivePromptCount
.RS 
The number of records in the KeyboardInteractivePrompt arrays.
.RE
.sp
KeyboardInteractivePromptEcho
.RS 
Specifies if the client should echo the value entered by the user or not.
.RE
.sp
KeyboardInteractivePromptPrompt
.RS 
The prompt label/text the client should present to the user.
.RE
.sp
Listening
.RS 
If True, the component accepts incoming connections on LocalPort.
.RE
.sp
LocalHost
.RS 
The name of the local host or user-assigned IP interface through which connections are initiated or accepted.
.RE
.sp
LocalPort
.RS 
The TCP port in the local host where the component listens.
.RE
.sp
SSHCertEncoded
.RS 
The certificate (PEM/base64 encoded).
.RE
.sp
SSHCertStore
.RS 
The name of the certificate store for the client certificate.
.RE
.sp
SSHCertStorePassword
.RS 
If the certificate store is of a type that requires  a password, this property is used to specify that  password in order to open the certificate store.
.RE
.sp
SSHCertStoreType
.RS 
The type of certificate store for this certificate.
.RE
.sp
SSHCertSubject
.RS 
The subject of the certificate used for client authentication.
.RE
.sp
SSHCompressionAlgorithms
.RS 
A comma-separated list containing all allowable compression algorithms.
.RE
.sp
SSHEncryptionAlgorithms
.RS 
A comma-separated list containing all allowable compression algorithms.
.RE
.sp


.SH METHODS
CloseChannel
.RS 
Closes a existing SSHChannel .
.RE
.sp
Config
.RS 
Sets or retrieves a configuration setting.
.RE
.sp
Disconnect
.RS 
Disconnect the specified client.
.RE
.sp
DoEvents
.RS 
Processes events from the internal message queue.
.RE
.sp
ExchangeKeys
.RS 
Causes the component to exchange a new set of session keys on the specified connection.
.RE
.sp
GetSSHParam
.RS 
Used to read a field from an SSH packet's payload.
.RE
.sp
GetSSHParamBytes
.RS 
Used to read a field from an SSH packet's payload.
.RE
.sp
OpenChannel
.RS 
Opens a new SSHChannel .
.RE
.sp
SendChannelData
.RS 
Used to send regular data over an SSH channel.
.RE
.sp
SendSSHPacket
.RS 
Used to send an encoded SSH packet to a connected client.
.RE
.sp
SetSSHParam
.RS 
Used to write a field to the end of a payload.
.RE
.sp
Shutdown
.RS 
Shuts down the server.
.RE
.sp


.SH EVENTS
Connected
.RS 
Fired immediately after a connection completes (or fails).
.RE
.sp
ConnectionRequest
.RS 
Fired when a request for connection comes from a remote host.
.RE
.sp
Disconnected
.RS 
Fired when a connection is closed.
.RE
.sp
Error
.RS 
Information about errors during data delivery.
.RE
.sp
SSHChannelClosed
.RS 
Fired when a channel is closed.
.RE
.sp
SSHChannelDataIn
.RS 
Fired when data is received on an SSH channel.
.RE
.sp
SSHChannelEOF
.RS 
Fired when the remote peer signals the end of the data stream for the channel.
.RE
.sp
SSHChannelOpened
.RS 
Fired when a channel is successfully opened.
.RE
.sp
SSHChannelOpenRequest
.RS 
Fired when a client attempts to open a new channel.
.RE
.sp
SSHChannelReadyToSend
.RS 
Fired when the component is ready to send data.
.RE
.sp
SSHChannelRequest
.RS 
Fired when the SSHHost sends a channel request to the client.
.RE
.sp
SSHChannelRequested
.RS 
Fired if the SSHChannelRequest was successful, any further processing for the channel request should be done here.
.RE
.sp
SSHServiceRequest
.RS 
Fired when a client requests a service to be started.
.RE
.sp
SSHStatus
.RS 
Shows the progress of the secure connection.
.RE
.sp
SSHUserAuthRequest
.RS 
Fires when a client attempts to authenticate a connection.
.RE
.sp


.SH "SEE ALSO"
.BR CertMgr (3),
.BR PSClient (3),
.BR SCP (3),
.BR SExec (3),
.BR SFTP (3),
.BR SSHClient (3),
.BR SSHDaemon (3),
.BR SShell (3),
.BR SSHReverseTunnel (3),
.BR SSHTunnel (3),


