.\" Copyright (c) 2014 /n software inc. - All rights reserved.
.\" For more information, please visit www.nsoftware.com.
.\"
.TH SSHClient 3  2008-02-26 "IP*Works! SSH V9" "IP*Works! SSH V9 C++ Edition Manual Pages"

.SH NAME
SSHClient \- The SSHClient component implements a fully functional, open-ended SSH client.

.SH SYNOPSIS
.B #include <ipworksssh.h>
.br
.B #include <sshclient.h>
.sp
.BI "SSHClient *pInstance = new SSHClient();"
.br

.SH DESCRIPTION
NOTE: The following is only a brief description of the component.  Please refer
to the accompanying HTML documentation for complete details.
.BR
The SSHClient component implements a fully functional, open-ended SSH client.
The SSHClient component can be used to perform any number of tasks secured by the Secure Shell (SSH) protocol. First set
SSHHost
,
SSHUser
and either
SSHPassword
or  the
SSHCert
* properties  , then call
SSHLogon
to establish a secure connection.

.br

To open channels, use
OpenChannel
. To open a channel to tunnel data to a remote machine, call
OpenTcpIpChannel
. The
Channels
property contains a list of all of the channels open for the current instance of the component.

.br

Once a "session" channel has been opened, you can call
StartService
to initialize a service on that channel. If you are using a "shell" service, you can call
OpenTerminal
to establish a pseudo-terminal for formatting the data output from the shell.

.br

Data received from the server will be fired through
SSHChannelData
events. Any requests received can be processed through the
SSHChannelRequest
event.

.br


.SH PROPERTIES
SSHChannelCount
.RS 
The number of records in the  arrays.
.RE
.sp
BytesSent
.RS 
The number of bytes actually sent after a sending channel data.
.RE
.sp
ChannelId
.RS 
An id generated by the component to identify the current SSH channel.
.RE
.sp
DataToSend
.RS 
A string of data to be sent to the remote host.
.RE
.sp
Connected
.RS 
Triggers a connection or disconnection.
.RE
.sp
FirewallAutoDetect
.RS 
This property tells the component whether or not to automatically detect and use firewall system settings, if available.
.RE
.sp
FirewallType
.RS 
This property determines the type of firewall to connect through.
.RE
.sp
FirewallHost
.RS 
This property contains the name or IP address of firewall (optional).
.RE
.sp
FirewallPassword
.RS 
This property contains a password if authentication is to be used when connecting through the firewall.
.RE
.sp
FirewallPort
.RS 
This property contains the TCP port for the firewall Host .
.RE
.sp
FirewallUser
.RS 
This property contains a user name if authentication is to be used connecting through a firewall.
.RE
.sp
LocalHost
.RS 
The name of the local host or user-assigned IP interface through which connections are initiated or accepted.
.RE
.sp
LocalPort
.RS 
The TCP port in the local host where IPPort binds.
.RE
.sp
SSHAcceptServerHostKeyEncoded
.RS 
The certificate (PEM/base64 encoded).
.RE
.sp
SSHAuthMode
.RS 
The authentication method to be used the component when performing an SSHLogon .
.RE
.sp
SSHCertEncoded
.RS 
The certificate (PEM/base64 encoded).
.RE
.sp
SSHCertStore
.RS 
The name of the certificate store for the client certificate.
.RE
.sp
SSHCertStorePassword
.RS 
If the certificate store is of a type that requires  a password, this property is used to specify that  password in order to open the certificate store.
.RE
.sp
SSHCertStoreType
.RS 
The type of certificate store for this certificate.
.RE
.sp
SSHCertSubject
.RS 
The subject of the certificate used for client authentication.
.RE
.sp
SSHCompressionAlgorithms
.RS 
A comma-separated list containing all allowable compression algorithms.
.RE
.sp
SSHEncryptionAlgorithms
.RS 
A comma-separated list containing all allowable compression algorithms.
.RE
.sp
SSHHost
.RS 
The address of the SSH host.
.RE
.sp
SSHKeyExchangeAlgorithms
.RS 
A comma-separated list containing all allowable key exchange algorithms.
.RE
.sp
SSHMacAlgorithms
.RS 
A comma-separated list containing all allowable message authentication algorithms.
.RE
.sp
SSHPassword
.RS 
The password for SSH password-based authentication.
.RE
.sp
SSHPort
.RS 
The port on the SSH server where the SSH service is running; by default, 22.
.RE
.sp
SSHPublicKeyAlgorithms
.RS 
A comma-separated list containing all allowable public key authentication algorithms.
.RE
.sp
SSHUser
.RS 
The username for SSH authentication.
.RE
.sp
Timeout
.RS 
A timeout for the component.
.RE
.sp


.SH METHODS
CloseChannel
.RS 
Closes a existing SSHChannel .
.RE
.sp
Config
.RS 
Sets or retrieves a configuration setting.
.RE
.sp
DecodePacket
.RS 
Decodes a hex-encoded SSH packet.
.RE
.sp
DoEvents
.RS 
Processes events from the internal message queue.
.RE
.sp
EncodePacket
.RS 
Hex encodes an SSH packet.
.RE
.sp
ExchangeKeys
.RS 
Causes the component to exchange a new set of session keys with the SSHHost .
.RE
.sp
GetSSHParam
.RS 
Used to read a field from an SSH packet's payload.
.RE
.sp
GetSSHParamBytes
.RS 
Used to read a field from an SSH packet's payload.
.RE
.sp
OpenChannel
.RS 
Opens a new SSHChannel .
.RE
.sp
OpenTcpIpChannel
.RS 
Opens a special TCP/IP tunneling SSHChannel .
.RE
.sp
OpenTerminal
.RS 
Creates a pseudo-terminal to be used to help display data for a channel.
.RE
.sp
SendChannelData
.RS 
Used to send regular data over an SSH channel.
.RE
.sp
SendSSHPacket
.RS 
Used to send an encoded SSH packet to a connected client.
.RE
.sp
SetSSHParam
.RS 
Used to write a field to the end of a payload.
.RE
.sp
SSHLogoff
.RS 
Logoff from the SSH server.
.RE
.sp
SSHLogon
.RS 
Logon to the SSHHost using the current SSHUser and SSHPassword .
.RE
.sp
StartService
.RS 
Requests the given service on a target channel.
.RE
.sp


.SH EVENTS
Connected
.RS 
Fired immediately after a connection completes (or fails).
.RE
.sp
ConnectionStatus
.RS 
Fired to indicate changes in connection state.
.RE
.sp
Disconnected
.RS 
Fired when a connection is closed.
.RE
.sp
Error
.RS 
Information about errors during data delivery.
.RE
.sp
SSHChannelClosed
.RS 
Fired when a channel is closed.
.RE
.sp
SSHChannelData
.RS 
Fired when the SSHHost sends channel data to the client.
.RE
.sp
SSHChannelEOF
.RS 
Fired when the remote peer signals the end of the data stream for the channel.
.RE
.sp
SSHChannelOpened
.RS 
Fired when a channel is successfully opened.
.RE
.sp
SSHChannelOpenRequest
.RS 
Fired when a host attempts to open a new channel.
.RE
.sp
SSHChannelReadyToSend
.RS 
Fired when the component is ready to send data.
.RE
.sp
SSHChannelRequest
.RS 
Fired when the SSHHost sends a channel request to the client.
.RE
.sp
SSHChannelRequested
.RS 
Fired if the SSHChannelRequest was successful, any further processing for the channel request should be done here.
.RE
.sp
SSHCustomAuth
.RS 
Fired when the component is doing custom authentication.
.RE
.sp
SSHKeyboardInteractive
.RS 
Fired when the component receives a request for user input from the server.
.RE
.sp
SSHServerAuthentication
.RS 
Fired after the server presents its public key to the client.
.RE
.sp
SSHStatus
.RS 
Shows the progress of the secure connection.
.RE
.sp


.SH "SEE ALSO"
.BR CertMgr (3),
.BR PSClient (3),
.BR SCP (3),
.BR SExec (3),
.BR SFTP (3),
.BR SSHClient (3),
.BR SSHDaemon (3),
.BR SShell (3),
.BR SSHReverseTunnel (3),
.BR SSHTunnel (3),


